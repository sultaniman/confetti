// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entities "github.com/sultaniman/confetti/platform/entities"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// ConfirmUser mocks base method.
func (m *MockUserRepo) ConfirmUser(userId uuid.UUID) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmUser", userId)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmUser indicates an expected call of ConfirmUser.
func (mr *MockUserRepoMockRecorder) ConfirmUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmUser", reflect.TypeOf((*MockUserRepo)(nil).ConfirmUser), userId)
}

// Create mocks base method.
func (m *MockUserRepo) Create(user *entities.NewUser) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepo)(nil).Create), user)
}

// CreateActionCode mocks base method.
func (m *MockUserRepo) CreateActionCode(actionCodeRequest *entities.ActionCodeRequest) (*entities.ActionCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActionCode", actionCodeRequest)
	ret0, _ := ret[0].(*entities.ActionCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActionCode indicates an expected call of CreateActionCode.
func (mr *MockUserRepoMockRecorder) CreateActionCode(actionCodeRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActionCode", reflect.TypeOf((*MockUserRepo)(nil).CreateActionCode), actionCodeRequest)
}

// Delete mocks base method.
func (m *MockUserRepo) Delete(id uuid.UUID) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepoMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepo)(nil).Delete), id)
}

// EmailExists mocks base method.
func (m *MockUserRepo) EmailExists(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailExists", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EmailExists indicates an expected call of EmailExists.
func (mr *MockUserRepoMockRecorder) EmailExists(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailExists", reflect.TypeOf((*MockUserRepo)(nil).EmailExists), email)
}

// Exists mocks base method.
func (m *MockUserRepo) Exists(userId uuid.UUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", userId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockUserRepoMockRecorder) Exists(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserRepo)(nil).Exists), userId)
}

// Get mocks base method.
func (m *MockUserRepo) Get(id uuid.UUID) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepoMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepo)(nil).Get), id)
}

// GetActionCode mocks base method.
func (m *MockUserRepo) GetActionCode(actionCodeCheck *entities.ActionCodeCheck) (*entities.ActionCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionCode", actionCodeCheck)
	ret0, _ := ret[0].(*entities.ActionCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionCode indicates an expected call of GetActionCode.
func (mr *MockUserRepoMockRecorder) GetActionCode(actionCodeCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionCode", reflect.TypeOf((*MockUserRepo)(nil).GetActionCode), actionCodeCheck)
}

// GetByEmail mocks base method.
func (m *MockUserRepo) GetByEmail(email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepoMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepo)(nil).GetByEmail), email)
}

// Update mocks base method.
func (m *MockUserRepo) Update(userId uuid.UUID, user *entities.UpdateUser) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, user)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepoMockRecorder) Update(userId, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepo)(nil).Update), userId, user)
}

// UpdateEmail mocks base method.
func (m *MockUserRepo) UpdateEmail(userId uuid.UUID, newEmail string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", userId, newEmail)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockUserRepoMockRecorder) UpdateEmail(userId, newEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockUserRepo)(nil).UpdateEmail), userId, newEmail)
}

// UpdatePassword mocks base method.
func (m *MockUserRepo) UpdatePassword(userId uuid.UUID, newPassword string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", userId, newPassword)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepoMockRecorder) UpdatePassword(userId, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepo)(nil).UpdatePassword), userId, newPassword)
}
